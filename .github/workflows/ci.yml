name: Firmware CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check-icons:
    name: Check icons
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check icons
        run: |
          # Check if the icons are in the correct format
          ./convert-icons.sh
          
          # fail if the repo is dirty
          if [ -n "$(git status --porcelain)" ]; then
              echo "The repo is dirty. Please commit the changes."
              exit 1
          fi

  setup-idf:
    name: Setup ESP-IDF
    runs-on: ubuntu-latest
    outputs:
      idf_version: ${{ steps.get-idf-version.outputs.idf_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get esp-idf version
        id: get-idf-version
        run: |
          # Get the commit hash of the ./esp-idf submodule without checking it out
          git submodule update --init --depth 1 -- esp-idf
          cd esp-idf
          idf_version=$(git rev-parse HEAD)
          echo "idf_version=$idf_version" >> $GITHUB_ENV
          echo "idf_version=$idf_version" >> $GITHUB_OUTPUT
          echo "home=$HOME" >> $GITHUB_ENV

      - name: Cache esp-idf
        uses: actions/cache@v4
        with:
          path: ${{ env.home }}/.espressif
          key: ${{ runner.os }}-esp-idf-${{ env.idf_version }}

      - name: Set up ESP-IDF
        run: |
          cd esp-idf
          ./install.sh
          cd ../
          . export.sh
          idf.py --version

  clang-format:
    name: Clang format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run clang-format
        run: |
          ./format.sh
          
          # fail if the repo is dirty
          if [ -n "$(git status --porcelain)" ]; then
              echo "The repo is dirty. Please commit the changes."
              exit 1
          fi

  get-configs:
    name: Get Configs
    runs-on: ubuntu-latest
    outputs:
      configs: ${{ steps.get-configs.outputs.configs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get configs
        id: get-configs
        run: |
          CONFIGS=$(./switchconf.sh --list) # outputs the list of configs separated by spaces
          # format it to json array
          echo "CONFIGS: $CONFIGS"
          CONFIGS=$(echo $CONFIGS | sed 's/ /", "/g')
          echo "CONFIGS: $CONFIGS"
          CONFIGS="[\"$CONFIGS\"]"
          echo "CONFIGS: $CONFIGS"
          # set the output variable
          echo "configs=$CONFIGS" >> "$GITHUB_OUTPUT"

  build:
    name: Build ${{ matrix.config }}
    runs-on: ubuntu-latest
    needs:
      - setup-idf
      - get-configs
      - check-icons
      - clang-format
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJSON(needs.get-configs.outputs.configs) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: '10'

      - name: Install ccache
        run: |
          apt install -y ccache

      - name: Get home directory
        id: get-home
        run: echo "home=$HOME" >> $GITHUB_ENV

      - name: Restore esp-idf cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.home }}/.espressif
          key: ${{ runner.os }}-esp-idf-${{ needs.setup-idf.outputs.idf_version }}
          fail-on-cache-miss: true

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.home }}/.ccache
          key: ${{ runner.os }}-ccache-${{ needs.setup-idf.outputs.idf_version }}
          restore-keys: |
              ${{ runner.os }}-ccache-${{ needs.setup-idf.outputs.idf_version }}
              ${{ runner.os }}-ccache-
              ${{ runner.os }}-ccache

      - name: Compile firmware
        run: |
          # Set the config
          ./switchconf.sh ${{ matrix.config }}
          
          # Verify build folder exists and is a symlink
          if [ ! -L "build" ]; then
              echo "Build folder is not a symlink"
              exit 1
          fi
          
          . export.sh
          
          export CCACHE_MAXSIZE=1024M
          
          # Build the firmware
          idf.py --ccache build
          
          ccache -s
          
          # Check if the repo is dirty
          if [ -n "$(git status --porcelain)" ]; then
              echo "The repo is dirty."
              exit 1
          fi

      - name: Upload firmware binary
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.config }}
          path: |
            build/bicycle-board.bin
            build/bicycle-board.elf
